!! Chapter 7

1. I did not include the following suffix from 7.2.1:
-ae[N.N]:%^e ! used to make English words into Yupik words

because we do not have a class for English words :)
We could potentially have a guesser that would turn a word that ends in a letter that's not allowed in Yupik (e.g. computer) to be assumed as a loan word and put this suffix to create a Yupik-like suffix?

2. I wasn't sure how to handle seghlegh-ghhalek >	seghleghhalek 
The problem was that -ghhalek[V.V] was said to be suffixing a verb (how V!), but this example shows that a noun like seghlegh-(bad thing) can take the suffix. I ended up with adding this suffix to all noun classes as below (depending on the ending of the base):

-ghhalek[N.V]:%^ghhalek    #; ! how V! (exclamation)
or 
-ghhalek[N.V]:%^%{.m.%}ghhalek    #; ! how V! (exclamation)

but I'm not sure if this suffix is actually used with other roots at all. 

I did add the suffix to all verb classes like the following too (depending on the ending of the base):

-ghhalek[V.V]:%^ghhalek    #; ! how V! (exclamation)
or 
-ghhalek[V.V]:%^%{.m.%}ghhalek    #; ! how V! (exclamation)

but I wonder if it's also bettter to put the two examples discussed in the book (seghlegh-ghhalek[N.V]:seghleghhalek and igamsiqanagh-ghhalek[V.V]:igamsiqanaghhalek) as exceptions instead. I'm not sure how productive this suffix is...

3. Sivugagh-mii[N.N][Abs][Sg]	Sivuqaghhmii	'resident of Gambell' (p. 42)
Again not sure how generalizable this is... Jacobson said "note devoicing" with this one. So as far as I can tell, Gambell was introduced in Chapter 3 as Sivugagh (Gambell; St. Lawrence Island in general), and all of sudden it gets devoiced when it take the +mii suffix. For now, I made this an exception, but I wonder if there's a rule for this.

4. Added the following exception:
Sivugagh-mii[N.N]:Sivuqaghhmii NounSuffixI;

5. This is just a heads-up. I added the following postbase that is mentioned in a footnote in chapter 7.

-igate[V.V]:%^%{.f.%}%{.at.%}ngigate  VerbSuffixV;  ! to not V (present-time implication for action verbs)

This postbase will be discussed in chapter 14, and I might have missed a point or two so let's make sure to update it when we go over chapter 14.

6. The following suffixes were added:

seghleghu      VerbSuffixI; ! to be bad
-lgu[N.V]:%^lgu              VerbSuffixI;    ! to have N
(or -lgu[N.V]:%^%{.m.%}lgu              VerbSuffixI;    ! to have N)

but they can be analyzed like the following:

seghleghu = seghlegh (bad thing) + -u (to be)
-lgu = -leg (to have) + -u (to be)

We'll see if we need to keep them as lexical items or not.

7. Remember this part from DropFinalC (chapter 4)?

                  g h -> g     || g       "^" %{%.m%.%} _ [ ? - .#. ]   .o. ! assimilate gh- onset to dropped -g
                  g h -> g h w || g h w   "^" %{%.m%.%} _ [ ? - .#. ]   .o. ! assimilate gh- onset to dropped -ghw
                  g h -> w h   || %{k%} w "^" %{%.m%.%} _ UnvoicedC     .o. ! assimilate gh- onset to dropped -w
                  g h -> w     || %{k%} w "^" %{%.m%.%} _ VoicedC       .o. ! assimilate gh- onset to dropped -w

                    k -> q w   || g h w   "^" %{%.m%.%} _ [ ? - .#. ]   .o. ! assimilate k-  onset to dropped -ghw 
                    k -> q     || g h     "^" %{%.m%.%} _ [ ? - .#. ]   .o. ! assimilate k-  onset to dropped -gh
                    k -> k w   || w       "^" %{%.m%.%} _ [ ? - .#. ]   .o. ! assimilate k-  onset to dropped -w

It seems that these rules do not apply to verbal inflection (they apply to nouns). A case in point is angyagh-squghhaq[N.N]-lgu[N.V]-nghite[V.V][Intr][Ind][1Du]	angyasqughhalgunghitukung. The last -kung (inflection) becomes -qung if we apply this rule, but that's not the correct surface form. So for now, I put an extra morpheme symbol after {.m.} for inflection as below to prevent the rules from applying to the inflection:

[3Sg]:%^            #;    [1Sg]:%^%{.m.%}%^nga   #;    [2Sg]:%^%{.m.%}%^ten  #;
[3Pl]:%^%{.m.%}%^t  #;    [1Pl]:%^%{.m.%}%^kut   #;    [2Pl]:%^%{.m.%}%^si   #;
[3Du]:%^%{.m.%}%^k  #;    [1Du]:%^%{.m.%}%^kung  #;    [2Du]:%^%{.m.%}%^tek  #;

8. I updated the lexi files and test files so that -u[N.V] (to be N) is always listed as -u[N.V] instead of -u[N.V] or -ngu[N.V] depending on the base. But we'll discuss this with Lane and Silvia and decide if we want to call it this way. --> we'll call it -~:(ng)u[N.V] following Jacobson

!! Chapter 8

1. I wasn't sure where to put question words that do not inflect such as qavngaq, when? (past). I've put them in particle.txt for now, but let me know what you think. We could make a new class for them?

2. Regarding the question words that do inflect such as sa, I put them in appropriate root classes. Among them this one was quite ugly (p.53):

kina[Abs][Sg]	kina
kinku[Abs][Pl]	kinkut
kitu[Erg][Sg]	kitum

I wanted to add an exception where kina become kinku if there's a plural or dual tag following or kitu if the ergative case follows it, but I wasn't able to implement them. I tried something like kina[Abs][Pl]:kinku[Abs][Pl]; in the exceptions file, but didn't work..

3. I implemented the following as an exception (p.53):
qafsina-~%:(ng)u[N.V][Intr][Intrg][2Pl]:qafsin'gutsi #;

2. I'm not sure how to handle the negh - neghe variation. As of now, (I think I added it in a previous chapter) we have two entries in the lexc file for the verb, to eat, because how the variation works was unclear back then. It is now mentioned in the footnote on page 51, and I wonder if it's better for us to have one entry for the verb (then we also have to choose which form is the canonical form) and apply a rule to pick one of the variation. But I wasn't sure about the rule because so far we're only getting one rule about the specific suffix on page 51. There's some pros and cons about these options, I think.
a. If we keep the two entries, we might be able to capture the variation in the user's input. However, we'll need to apply a rule to control both entries' behavior with the specific suffixes.
b. If we combine the variations and have one standard form, the lexc file might be neater, but the user might not have a standard form for the verb and find it difficult to enter the verb. We'll still need to come up with a rule to make the verb root end in an appropriate letter.
I haven't created a rule about this because I wasn't sure which way to go. Initially I liked the first option (a), but I also think that to be more consistent, we might need to go for (b) and have the stardard form as negh<e> just like Jacobson? What do you think?

3. Jacobson mentions that Quyillgaat can become Quyillgaay in footnote 2 on page 52, but he says the condition where that happens is unclear, so I implemented this partiuclar example as an exception. So Quyilleg[Abs][Pl] if it's not used in a yes/no question, it should be Quyillget, but if it is, it can be Quyillgaat or Quyillgaay.

4-1. I'm not sure how to handle the variation about the yes/no question, more specifically the lengthening of a vowel of the ending (e.g. qiyaziin as well as qiyazin, page 52). I copied the interrogative suffixes from the preivious foma lexc file, so we currently have the variation hard-coded in the lexc file for all [Intr][Intrg] and some of [Trns][Intrg] endings. I see some variation missing, and I was not sure if I should add them or not because you might have had a reason not to list all variations. Also, I  wonder if it would be better to create a rule for these as there are quite consistent patterns. 

4-2. Another the issue is that as the example in 3 shows, this variation may also apply to any last word that is used in a yes/no question. So I wasn't sure if we should handle this variation for all nouns as well, but that may make things messier. And this variation requires some syntactic information. or I thought we could have a tag for it. For example, we can create a new tag called say [Yes/NoQuestionOnly] and when the user provides the lengthened form, we can give them the analysis and provide why that variation is there? Right now, we're overgeneralizing that a verb with the interrogative case can be lengthened, but I wonder if it's better not to overgeneralize that but provide something when the user uses the lengthened version of a word :D

5. I think there might be some typos on Jacobson. I fixed them, but I'd like to ask you to review them in case I made any mistake:
(p. 53)
sa-â€“ghllag[N.N]-~:(ng)u[N.V][Intr][Ind][3Sg]	sagllaguuq -> saghllaguuq
My output has gh instead of g as in saghllaguuq, which I think is the right form.

(p. 54)
For these, the English translation has "want to" part or -@~fyug[V.V], but the right hand side seems to correspond to one without the suffix.
laalighfike-@~fyug[V.V][Trns][Intrg][2Sg][3Sg]	laalighfiksigu
laalighfike-@~fyug[V.V][Trns][Intrg][2Sg][3Pl]	laalighfiksiki
laalighfike-@~fyug[V.V][Trns][Intrg][2Sg][3Du]	laalighfisikek 
so in the test tsv file, I have laalighfike[Trns][Intrg][2Sg][3Sg] instead of laalighfike-@~fyug[V.V][Trns][Intrg][2Sg][3Sg] and so forth.

And as for the last line above, I think it's missing a 'k' so I fixed it.
laalighfike[Trns][Intrg][2Sg][3Du]	laalighfisikek -> laalighfi"k"sikek

(p. 55)
laalighfike[Trns][Ind][3Sg][3Sg]	laalighfika -> laalighfikaa
There's no laalighfike[Trns][Ind][3Sg]"[4Sg]", right? If so, I think Jacobson made a mistake with the first word of the following sentence:
Laalighfika  aakaghmi uginga, He visited his (own) sister's husband.