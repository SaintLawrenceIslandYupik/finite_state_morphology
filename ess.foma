#!/usr/bin/env foma -f

read lexc exceptions.lexc
def Exceptions

read lexc ess.lexc
def Lex

define Stop                [  p   |   t                 |  k     | "kw"   |  q    | "qw"       ] ;
define VoicedFricative     [  v   |   l  | z | y |  r   |  g     |  w     | "gh"  | "ghw"      ] ;
define VoicelessFricative  [  f   | "ll" |   s   | "rr" | "gg"   | "wh"   | "ghh" | "ghhw" | h ] ;
define VoicedNasal         [  m   |   n                 | "ng"   | "ngw"                       ] ;
define VoicelessNasal      [ "mm" | "nn"                | "ngng" | "ngngw"                     ] ;

define Fricative [ VoicelessFricative | VoicedFricative ] ;
define Nasal     [ VoicelessNasal     | VoicedNasal     ] ;

define WordBoundary [ .#. ] ;

define C         [ q | Stop | Fricative | Nasal ] ;        

define FullVowel   [ a   | i   | u   ] ;
define DoubleVowel [ a a | i i | u u ] ;
define V         [ e | FullVowel ];
#define FinalGH "gh-" -> q ;
#define WeakFinalGH "gh*-" -> q ;

#define WeakMarker [? [a|i|u]] - [a a | i i | u u] ;
#define WeakMarker [? FullVowel] - DoubleVowel ;


#def WeakElision gh -> 0 || WeakMarker _ "+" ,, gh "*" -> gh || _ "+";

define WeakFinalC  gh     -> 0  || [ WordBoundary | C ] FullVowel _ "-w" ,,
                   "-w"   -> 0  ;

define UnmarkStrongGh gh "*" -> gh ;

define FinalE     [..] -> a || WordBoundary (C) a _ C e   "~f"  ,,  ! e-hopping
                  [..] -> i || WordBoundary (C) i _ C e   "~f"  ,,  ! e-hopping
                  [..] -> u || WordBoundary (C) u _ C e   "~f"  ,,  ! e-hopping
                     e -> 0 || V C _ C "~f" ,,                      ! e-dropping
                  "~f" -> 0 ;                                       ! finally remove intermediate symbol ~f

define SemiFinalE [..] -> a || WordBoundary (C) a _ C e C "~sf" ,,  ! e-hopping
                  [..] -> i || WordBoundary (C) i _ C e C "~sf" ,,  ! e-hopping
                  [..] -> u || WordBoundary (C) u _ C e C "~sf" ,,  ! e-hopping
                     e -> 0 || V C _ C "~sf" ,,                     ! e-dropping
                 "~sf" -> 0 ;                                       ! finally remove intermediate symbol ~sf

define UvularDropping gh ":" e -> a || [ ? - a ] a _ ,,
                      gh ":" e -> i || [ ? - i ] i _ ,,
                      gh ":" e -> u || [ ? - u ] u _ ,,
                         ":"   -> 0 ||                   [ ? - "gh" ] _            ,,
                         ":"   -> 0 ||                          gh    _  [ ? - e ] ,,
                         ":"   -> 0 || [ ? - FullVowel ]        gh    _            ,,
                         ":"   -> 0 ||     DoubleVowel          gh    _            ;

! kaviigh
! kaviigh ~sf-w:(e)t
! kaviigh -w:(e)t
! kaviigh :(e)t

define InterConsonantalE "(e)" -> e || C (":") _  ,,                      ! convert (e) to e when following a consonant
                         "(e)" -> 0 || V (":") _  ;                       ! otherwise delete it

def BaseFinalEndings    ghw      -> qw , 
                        gh ("*") -> q   , 
                        g        -> k   ,
                        w        -> kw ,
                        t e      -> t a  || _ .#. ,,
                        t e      -> n    || V _ .#. ,,
                        e        -> a    || _ .#. ;


#define Cleanup  ":" -> 0 ;
                 
#!define Filter < rules.regex
#read regex YupikNouns .o. SemiFinalE ;
#print net
#pairs

#regex Exceptions .P. [ Lex .o. BaseFinalEndings .o. WeakElision .o. eElision .o. eHopping .o. FinalEtoA .o. Cleanup ];

regex Exceptions .P. [ Lex .o. SemiFinalE .o. FinalE .o. WeakFinalC .o. UnmarkStrongGh .o. InterConsonantalE .o. UvularDropping .o. BaseFinalEndings ];

#pairs

# apply up iye
# apply up iiyet
# apply up iiyek
# apply down iye[N][Abs][Sg]
# apply down iye[N][Abs][Pl]
# apply down iye[N][Abs][Du]

# apply up kamek
# apply up kaamget
# apply up kaamgek
# apply down kameg[Abs][Sg]
# apply down kameg[Abs][Pl]
# apply down kameg[Abs][Du]
# 
# apply up kii
# apply up kiit
# apply up kiik
# apply down kii[Abs][Sg]
# apply down kii[Abs][Pl]
# apply down kii[Abs][Du]
# 
# apply up ateq
# apply up aatghet
# apply up aatghek
# apply down ategh[Abs][Sg]
# apply down ategh[Abs][Pl]
# apply down ategh[Abs][Du]
# 
# apply up ayveq
# apply up ayveghet
# apply up ayveghek
# apply down ayvegh[Abs][Sg]
# apply down ayvegh[Abs][Pl]
# apply down ayvegh[Abs][Du]
# 
# apply up aghnaq
# apply up aghnat
# apply up aghnak
# apply down aghnagh[Abs][Sg]
# apply down aghnagh[Abs][Pl]
# apply down aghnagh[Abs][Du]
# 
# apply up aghneq
# apply up aghneghet
# apply up aghneghek
# apply down aghnegh[Abs][Sg]
# apply down aghnegh[Abs][Pl]
# apply down aghnegh[Abs][Du]
# 
# apply up afsengaq
# apply up afsengaat
# apply up afsengaak
# apply down afsengagh*[Abs][Sg]
# apply down afsengagh*[Abs][Pl]
# apply down afsengagh*[Abs][Du]

print dot > ess.dot

pairs > yupik.pairs

