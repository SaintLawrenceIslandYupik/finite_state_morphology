#!/usr/bin/env foma -f

read lexc exceptions.lexc
def Exceptions

!read lexc tiny.lexc
read lexc ess.lexc
def NounLexicon

define Stop                [  p   |   t                 |  k     | "kw"   |  q    | "qw"       ] ;
define VoicedFricative     [  v   |   l  | z | y |  r   |  g     |  w     | "gh"  | "ghw"      ] ;
define VoicelessFricative  [  f   | "ll" |   s   | "rr" | "gg"   | "wh"   | "ghh" | "ghhw" | h ] ;
define VoicedNasal         [  m   |   n                 | "ng"   | "ngw"                       ] ;
define VoicelessNasal      [ "mm" | "nn"                | "ngng" | "ngngw"                     ] ;

define Fricative [ VoicelessFricative | VoicedFricative ] ;
define Nasal     [ VoicelessNasal     | VoicedNasal     ] ;

define WordBoundary [ .#. ] ;

define C         [ Stop | Fricative | Nasal ] ;        

define FullVowel   [ a   | i   | u   ] ;
define DoubleVowel [ a a | i i | u u ] ;
define V           [ e | FullVowel ];

define WeakFinalC  gh     -> 0  || [ WordBoundary | C ] FullVowel _ "-w"   ∘
                   "-w"   -> 0  ;

define UnmarkStrongGh gh "*" -> gh ;

define FinalE     [..] -> a || WordBoundary (C) a _ C e   "~f"   ∘  ! e-hopping
                  [..] -> i || WordBoundary (C) i _ C e   "~f"   ∘  ! e-hopping
                  [..] -> u || WordBoundary (C) u _ C e   "~f"   ∘  ! e-hopping
                     e -> 0 ||                    V C _   "~f"   ∘  ! e-dropping
                  "~f" -> 0 ;                                       ! finally remove intermediate symbol ~f

define SemiFinalE [..] -> a || WordBoundary (C) a _ C e C "~sf"  ∘  ! e-hopping
                  [..] -> i || WordBoundary (C) i _ C e C "~sf"  ∘  ! e-hopping
                  [..] -> u || WordBoundary (C) u _ C e C "~sf"  ∘  ! e-hopping
                     e -> 0 ||                    V C _ C "~sf"  ∘  ! e-dropping
                 "~sf" -> 0 ;                                       ! finally remove intermediate symbol ~sf

define UvularDropping gh ":" e -> a || [ ? - a ] a _    ∘
                      gh ":" e -> i || [ ? - i ] i _    ∘
                      gh ":" e -> u || [ ? - u ] u _    ∘
                         ":"   -> 0 ;

define InterConsonantalE "(e)" -> e || C (":") _  ∘                  ! convert (e) to e when following a consonant
                         "(e)" -> 0 || V (":") _  ;                  ! otherwise delete it

def BaseFinalEndings    ghw      -> qw , 
                        gh ("*") -> q  , 
                        g        -> k  ,
                        w        -> kw ,
                        t e      -> t a  ||   _ WordBoundary  ,, 
                        t e      -> n    || V _ WordBoundary   ∘
                        e        -> a    ||   _ WordBoundary ;

define Nouns 
	Exceptions .P. [ 
		NounLexicon ∘ 
		SemiFinalE  ∘ 
!		FinalE      ∘ 
		WeakFinalC  ∘ 
		UnmarkStrongGh ∘ 
		InterConsonantalE ∘ 
		UvularDropping ∘ 
		BaseFinalEndings 
	];


!read lexc ess.verbs.lexc
!define VerbLexicon
!
!define IntrInd "(g/t)" -> g || DoubleVowel "~f" _    ∘
!               "(g/t)" -> t ||           C "~f" _    ∘
!               "(g/t)" -> 0 ;
!
!define VowelDominance a i -> i i  ∘
!                      i a -> i i  ∘
!                      u i -> i i  ∘
!                      i u -> i i  ∘
!                      a u -> a a  ∘
!                      u a -> a a  ;
                      

!define Verbs [ VerbLexicon ∘ IntrInd ∘ FinalE ∘ VowelDominance ] ;


!regex [ Nouns  ∘  VerbLexicon ]
!push VerbLexicon

!define Lexicon  [ Nouns |  Verbs ] ;
define Lexicon   Nouns  ;

push Lexicon

!save stack ess.fomabin

!print dot > ess.dot

!pairs > yupik.pairs

