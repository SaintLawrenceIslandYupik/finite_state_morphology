#!/usr/bin/env foma -f

read lexc exceptions.lexc
define Exceptions

read lexc ess.lexc
define Lexicon


!==============
! MISC SYMBOLS 
!==============
! "^"    morpheme boundary
! .#.    word boundary
! {g} h  weak gh


!======
! SETS 
!======

define C         [ f | g | h | k | l | m | n | p | q | r | s | t | v | w | y | z | %{t%} | %{g%} | %{k%}] ;
define FullVowel                                                     [ a | i | u ] ;
define V                                                         [ e | FullVowel ] ;


!=======
! RULES
!=======

define HopSemiFinalE [..] -> e || .#. (C) (C) FullVowel _ C e g (h) "^" %{%.sf%.%} .o. ! Insert an e to lengthen a full vowel when semi-final e is dropped (e hopping)
                        e -> 0 ||               V C _ g (h)     "^" %{%.sf%.%} .o. ! VowelDominance will apply later
               %{%.sf%.%} -> 0                                                     ;

define DropWeakC %{g%} h -> 0 || _ "^" %{%.w%.%} .o. ! Drop a weak gh from the base
               %{%.w%.%} -> 0                    ;

define DropUvular g h -> 0   || (C) FullVowel _ "^" %{e%} .o. ! Drop the uvular gh between two single vowels in case of adding (e) 
                    a -> a a ||           (C) _ "^" %{e%} .o.
                    i -> i i ||           (C) _ "^" %{e%} .o.
                    u -> u u ||           (C) _ "^" %{e%} ;

define AddE %{e%} -> e || C "^" _ .o.
            %{e%} -> 0 || V "^" _ ;

define HopFinalE  %{%.f%.%} -> 0 ||             C C e "^" _ C                  .o. ! Do not drop and hop the final e if that leads to a cluster of thress consonats
                       [..] -> e || .#. (C) (C) FullVowel _ C e  "^" %{%.f%.%} .o. ! Insert an e to lengthen a full vowel when final e is dropped (e hopping)
                          e -> 0 ||                       _      "^" %{%.f%.%} .o. ! VowelDominance will apply later             
                  %{%.f%.%} -> 0                                                   ;


define VowelDominance a ("^") i -> i i .o.
                      i ("^") a -> i i .o.
                      u ("^") i -> i i .o.
                      i ("^") u -> i i .o.
                      a ("^") u -> a a .o.
                      u ("^") a -> a a .o.
                      a ("^") e -> a a .o. ! Handle e happing
                      i ("^") e -> i i .o.
                      u ("^") e -> u u ;

!================
! CLEAN-UP RULES
!================

define BaseFinalEndings %{t%} e -> n   ||               V _ "^" .#.     ,   ! Jacobson 2.2.1 Words and Bases
                        %{t%} e -> t a                                  .o. 
                              e -> a   ||                 _ "^" .#.     .o. 
                              w -> k w || [C - h | %{k%}] _ "^" .#.     .o. 
                            g h -> q   ||                 _ (w) "^" .#. .o.
                        %{g%} h -> q   ||                 _ "^" .#.     .o.  
                              g -> k   ||                 _ "^" .#.     ;

define CleanupDigraph %{k%} -> 0   .o. 
                    %{g%} h -> g h .o.
                      %{t%} -> t   ;

define CleanupMorphBoundary "^" -> 0 ;


!==============
! RULE CASCADE
!==============

define Rules [
    HopSemiFinalE .o.
    DropWeakC .o.
    DropUvular .o.
    AddE .o.
    HopFinalE .o.
    VowelDominance .o.
    BaseFinalEndings .o. 
    CleanupDigraph .o.
    CleanupMorphBoundary
];

define Grammar [ Exceptions .P. [ Lexicon .o. Rules ] ] ;
