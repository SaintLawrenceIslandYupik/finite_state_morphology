#!/usr/bin/env foma -f

read lexc exceptions.lexc
def Exceptions
#define Exceptions [ y u g "[N]" "[Sg]" .x. y u u k ] ;

read lexc yupiktest.lexc
#read lexc tiny.lexc
def Lex

def StrongVowel [a|i|u];
def V [e | StrongVowel ];

define Stop                [  p   |   t                 |  k     |  kw    |  q    |  qw        ] ;
define VoicedContinuant    [  v   |   l  | z | y |  r   |  g     |  w     |  gh   |  ghw       ] ;
define VoicelessContinuant [  f   |   ll |   s   |  rr  |  gg    |  wh    |  ghh  |  ghhw  | h ] ;
define VoicedNasal         [  m   |   n                 |  ng    |  ngw                        ] ;
define VoicelessNasal      [  mm  |   nn                |  ngng  |  ngngw                      ] ;

define Continuant [ VoicelessContinuant | VoicedContinuant ] ;
define Nasal      [ VoicelessNasal      | VoicedNasal      ] ;

define C          [ Stop | Continuant | Nasal ] ;      


def WeakMarker [? [a|i|u]] - [a a | i i | u u] ;

def BaseFinalEndings    ghw      -> qw , 
                        gh ("*") -> q   , 
                        g        -> k   ,
                        w        -> kw ,
                        t e      -> t a  || _ .#. ,,
                        t e      -> n    || V _ .#. ;
                 
def WeakElision gh -> 0 || WeakMarker _ "+" ,, gh "*" -> gh || _ "+";
def eElision e -> 0 || V "+" _ ; 

# Whenever a stem is of the form #(C) V' C e (C)/ ,V' is doubled (Jacobson, 1979, p. 10)

def eHopping a -> a a , i -> i i, u -> u u || .#. (C) _ (C) e (C) "+" ,, e -> 0 || .#. (C) FullVowel (C) _ (C) "+";

def Cleanup "+" -> 0;

def FinalEtoA e -> a || _ .#. ;

regex Exceptions .P. [ Lex .o. BaseFinalEndings .o. WeakElision .o. eElision .o. eHopping .o. FinalEtoA .o. Cleanup ];
#regex                 Lex .o. BaseFinalEndings .o. WeakElision .o. eElision .o. eHopping .o. FinalEtoA .o. Cleanup  ;
#set print-space ON
#print random-lower
pairs
print dot > examplefile.dot

apply up tuma
apply up tuumek
apply up tuumet
apply down tume[N][Sg]
apply down tume[N][Pl]
apply down tume[N][Dl]
