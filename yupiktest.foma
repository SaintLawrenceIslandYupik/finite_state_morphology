#!/usr/bin/env foma -f

read lexc yupiktest.lexc
def Lex

def StrongVowel [a|i|u];
def V [e | StrongVowel ];

define Stop                [  p   |   t                 |  k     | "kw"   |  q    | "qw"       ] ;
define VoicedFricative     [  v   |   l  | z | y |  r   |  g     |  w     | "gh"  | "ghw"      ] ;
define VoicelessFricative  [  f   | "ll" |   s   | "rr" | "gg"   | "wh"   | "ghh" | "ghhw" | h ] ;
define VoicedNasal         [  m   |   n                 | "ng"   | "ngw"                       ] ;
define VoicelessNasal      [ "mm" | "nn"                | "ngng" | "ngngw"                     ] ;

define Fricative [ VoicelessFricative | VoicedFricative ] ;
define Nasal     [ VoicelessNasal     | VoicedNasal     ] ;

define C         [ Stop | Fricative | Nasal ] ;      


def WeakMarker [? [a|i|u]] - [a a | i i | u u] ;

def FinalGH g h ("*") -> q || _ .#. ;
def WeakElision g h -> 0 || WeakMarker _ "+" ,, g h "*" -> 0 || _ "+";
def eElision e -> 0 || V "+" _ ; 

# Whenever a stem is of the form #(C) V' C e (C)/ ,V' is doubled (Jacobson, 1979, p. 10)

def eHopping a -> a a , i -> i i, u -> u u || .#. (C) _ (C) e (C) "+" ,, e -> 0 || .#. (C) V (C) _ (C) "+";

def Cleanup "+" -> 0;

regex Lex .o. FinalGH .o. WeakElision .o. eElision .o. eHopping .o. Cleanup;
pairs
